#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

name: Build

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      # aaaaaa
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        buildType: [RelWithDebInfo]
    env:
      BuildType: ${{matrix.buildType}}
      ProtonBuildDir: ${{github.workspace}}/qpid-proton/build
      DispatchBuildDir: ${{github.workspace}}/qpid-dispatch/build
      InstallPrefix: ${{github.workspace}}/install
      CMakeExtraArgs: '-DBUILD_BINDINGS=python'
    steps:
      - uses: actions/checkout@v2
        with:
          repository: 'apache/qpid-proton'
          ref: 'master'
          path: 'qpid-proton'
      - uses: actions/checkout@v2
        with:
          path: 'qpid-dispatch'
      - name: actions/cache@v2 node-modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Create Build and Install directories
        run: mkdir -p "${ProtonBuildDir}" "${DispatchBuildDir}" "{InstallPrefix}"
        shell: bash
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.6
          architecture: x64
      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools wheel tox
      - name: Install Linux dependencies
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo apt install -y swig ninja-build libpython3-dev libsasl2-dev libjsoncpp-dev libwebsockets-dev xz-utils
      - name: Install MacOS dependencies
        if: ${{ runner.os == 'macOS' }}
        run: |
          brew install cmake ninja libuv swig pkgconfig jsoncpp openssl libwebsockets
      - name: qpid-proton cmake configure
        working-directory: ${{env.ProtonBuildDir}}
        run: cmake "${{github.workspace}}/qpid-proton" "-DCMAKE_INSTALL_PREFIX=${InstallPrefix}" "-DCMAKE_BUILD_TYPE=${BuildType}" "-DBUILD_TESTING=OFF" "-DENABLE_FUZZ_TESTING=OFF" "-GNinja" ${CMakeExtraArgs}
        shell: bash
      - name: qpid-proton cmake build/install
        run: cmake --build "${ProtonBuildDir}" --config ${BuildType} -t install
        shell: bash
      - name: install qpid-proton python wheel
        run: python -m pip install "${ProtonBuildDir}/python/pkgs/python_qpid_proton-0.32.0-cp36-cp36m-linux_x86_64.whl"
        shell: bash
      - name: qpid-dispatch cmake configure
        working-directory: ${{env.DispatchBuildDir}}
        run: cmake "${{github.workspace}}/qpid-dispatch" "-DCMAKE_INSTALL_PREFIX=${InstallPrefix}" "-DCMAKE_BUILD_TYPE=${BuildType}" "-GNinja" "-DUSE_BWRAP=ON" ${CMakeExtraArgs}
        shell: bash
      - name: qpid-dispatch cmake build/install
        run: cmake --build "${DispatchBuildDir}" --config ${BuildType} -t install
        shell: bash
      # github actions/upload-artifact@v2 does not preserve file permissions (executable)
      - name: Compress build
        working-directory: ${{github.workspace}}
        run: tar --xz -cf /tmp/archive.tar.xz --exclude '*.o' --exclude '*.pyc' --exclude '.git' --exclude='qpid-dispatch/build/console' qpid-dispatch install qpid-proton/build/python/pkgs
      - name: Upload archive
        uses: actions/upload-artifact@v2
        with:
          name: qpid_dispatch_wrk_${{matrix.os}}_${{matrix.buildType}}
          path: /tmp/archive.tar.xz
  test:
    name: "Test (${{matrix.os}}, shard ${{matrix.shard}} of ${{matrix.shards}}"
    runs-on: ${{ matrix.os }}
    needs: [build]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        buildType: [RelWithDebInfo]
        shard: [1, 2, 3, 4]
        shards: [4]
    env:
      BuildType: ${{matrix.buildType}}
      ProtonBuildDir: ${{github.workspace}}/qpid-proton/build
      DispatchBuildDir: ${{github.workspace}}/qpid-dispatch/build
      InstallPrefix: ${{github.workspace}}/install
      PKG_CONFIG_PATH: ${{matrix.pkg_config_path}}
      LD_LIBRARY_PATH: ${{github.workspace}}/install/lib
    steps:
      - name: Download Build
        uses: actions/download-artifact@v2
        with:
          name: qpid_dispatch_wrk_${{matrix.os}}_${{matrix.buildType}}
#      - name: download artifact & unzip
#        run: curl -O archive.zip ${{matrix.archive_url}} && unzip archive.zip
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.6
          architecture: x64
      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install tox
      - name: Install Linux dependencies
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo apt install -y bubblewrap swig ninja-build libsasl2-2 sasl2-bin libjsoncpp1 libwebsockets15 xz-utils
      - name: Install MacOS dependencies
        if: ${{ runner.os == 'macOS' }}
        run: |
          brew install cmake ninja libuv swig pkgconfig jsoncpp openssl libwebsockets
      - name: Unpack archive
        run: tar --xz -xf archive.tar.xz
      - name: install qpid-proton python wheel
        run: python -m pip install "${ProtonBuildDir}/python/pkgs/python_qpid_proton-0.32.0-cp36-cp36m-linux_x86_64.whl"
        shell: bash
      - name: CTest
        working-directory: ${{env.DispatchBuildDir}}
        run: |
          ulimit -c unlimited
          ctest -C ${BuildType} -V -T Test --no-compress-output -I ${{matrix.shard}},,${{matrix.shards}} -j2
        shell: bash
      - name: Upload test results
        uses: actions/upload-artifact@v2
        if: ${{ ! cancelled() }}
        with:
          name: Test_Results_${{matrix.os}}_${{matrix.buildType}}_${{matrix.shard}}
          path: ${{env.DispatchBuildDir}}/Testing/**/*.xml
      - name: Upload core files
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cores_${{matrix.os}}_${{matrix.buildType}}_${{matrix.shard}}
          path: |
            **/core
      - name: Environment (Linux)
        if: ${{ always() && runner.os != 'macOS' }}
        run: env -0 | sort -z | tr '\0' '\n'
        shell: bash
      - name: Environment (macOS)
        if: ${{ always() && runner.os == 'macOS' }}
        run: env | sort
        shell: bash