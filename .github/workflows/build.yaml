#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

name: Build

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest]
        buildType: [RelWithDebInfo]
        include:
          - os: macOS-latest
            pkg_config_path: '/usr/local/opt/openssl@1.1/lib/pkgconfig'
            cmake_extra: '-DBUILD_RUBY=no'
    env:
      BuildType: ${{matrix.buildType}}
      ProtonBuildDir: ${{github.workspace}}/qpid-proton/build
      DispatchBuildDir: ${{github.workspace}}/qpid-dispatch/build
      InstallPrefix: ${{github.workspace}}/install
      PKG_CONFIG_PATH: ${{matrix.pkg_config_path}}
    steps:
      - uses: actions/checkout@v2
        with:
          repository: 'apache/qpid-proton'
          ref: 'master'
          path: 'qpid-proton'
      - uses: actions/checkout@v2
        with:
          path: 'qpid-dispatch'
      - name: Create Build and Install directories
        run: mkdir -p "${ProtonBuildDir}" "${DispatchBuildDir}" "{InstallPrefix}"
        shell: bash
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.6
          architecture: x64
      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools wheel tox unittest2
      - name: Install Linux dependencies
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo apt install -y swig ninja-build libpython3-dev libsasl2-dev libjsoncpp-dev libwebsockets-dev
      - name: Install MacOS dependencies
        if: ${{ runner.os == 'macOS' }}
        run: |
          brew install ninja libuv swig pkgconfig jsoncpp libwebsocket
      - name: qpid-proton cmake configure
        working-directory: ${{env.ProtonBuildDir}}
        run: cmake "${{github.workspace}}/qpid-proton" "-DCMAKE_BUILD_TYPE=${BuildType}" "-DCMAKE_INSTALL_PREFIX=${InstallPrefix}" "-G 'Ninja Multi-Config'" ${{matrix.cmake_extra}}
        shell: bash
      - name: qpid-proton cmake build/install
        run: cmake --build "${ProtonBuildDir}" --config ${BuildType} -t install
        shell: bash
      - name: qpid-dispatch cmake configure
        working-directory: ${{env.DispatchBuildDir}}
        run: cmake "${{github.workspace}}/qpid-proton" "-DCMAKE_BUILD_TYPE=${BuildType}" "-DCMAKE_INSTALL_PREFIX=${InstallPrefix}" "-G Ninja Multi-Config" ${{matrix.cmake_extra}}
        shell: bash
      - name: qpid-dispatch cmake build/install
        run: cmake --build "${DispatchBuildDir}" --config ${BuildType} -t install
        shell: bash
      - name: Upload Install
        uses: actions/upload-artifact@v2
        with:
          name: qpid_dispatch_pkg_${{matrix.os}}_${{matrix.buildType}}
          path: ${{env.InstallPrefix}}
      - name: ctest
        continue-on-error: true
        working-directory: ${{env.DispatchBuildDir}}
        run: ctest -C ${BuildType} -V -T Test --no-compress-output
        shell: bash
      - name: Upload Test results
        uses: actions/upload-artifact@v2
        with:
          name: Test_Results_${{matrix.os}}_${{matrix.buildType}}
          path: ${{env.BuildDir}}/Testing/**/*.xml
      - name: Upload build directories on failure
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: Build_${{matrix.os}}_${{matrix.buildType}}
          path: ${{env.DispatchBuildDir}}
      - name: Environment (Linux/Windows)
        if: ${{ always() && runner.os != 'macOS' }}
        run: env -0 | sort -z | tr '\0' '\n'
        shell: bash
      - name: Environment (macOS)
        if: ${{ always() && runner.os == 'macOS' }}
        run: env | sort
        shell: bash
